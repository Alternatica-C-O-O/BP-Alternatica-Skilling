name: Backend CI/CD

on:
  push:
    branches:
      - master
    paths:
      - 'backend/**' 
      - '.github/workflows/backend-ci.yml' 
      - 'pom.xml' 
    paths-ignore:
      - 'backend/docs/**'
  pull_request:
    branches:
      - master
    paths:
      - 'backend/**'
      - '.github/workflows/backend-ci.yml'
      - 'pom.xml'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      JAVA_VERSION: '21' 

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin' 

    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-

    - name: Build and Test Backend Services
      run: |
        cd backend/
        mvn -B clean install -DskipTests # Construye todos los módulos, pero salta los tests por ahora para velocidad en demo
        mvn -B test # Ejecuta los tests después de la instalación
      env:
        SPRING_PROFILES_ACTIVE: ci-test

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and Push Docker Image for API Gateway
      run: |
        docker build -t your-dockerhub-username/lms-api-gateway:latest backend/api-gateway
        docker push your-dockerhub-username/lms-api-gateway:latest

    - name: Deploy API Gateway to Render
      run: |
        echo "Simulando despliegue de API Gateway a Render..."
        echo "Verifica la configuración de Render para auto-deploy desde DockerHub o usa la Render CLI."